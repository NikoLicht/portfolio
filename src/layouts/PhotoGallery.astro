---
import MainLayout from "./MainLayout.astro";
import GradientBox from "./GradientBox.astro";
import {marked} from "marked";

interface GalleryImage {
  title: string;
  link: string;
  date?: string;
  gear?: string;
  film?: string;
}

const { images = [], about = "" } = Astro.props.frontmatter as {images: GalleryImage[], about: string};
images.sort((a, b) => {
  const dateA = parseDate(a.date);
  const dateB = parseDate(b.date);
  return dateB.getTime() - dateA.getTime(); // Descending
});

const aboutHtml = marked.parse(about);

function formatMonthYear(dateInput: string | number | undefined): string {
  if (!dateInput) return "";
  // Accepts "YYYY", "MM-YYYY", or "YYYY-MM" or Date
  let dateStr = String(dateInput).trim();
  // If only year, return as-is
  if (/^\d{4}$/.test(dateStr)) return dateStr;
  // If MM-YYYY or YYYY-MM
  let parts = dateStr.includes('-') ? dateStr.split('-') : [];
  let month: string | undefined, year: string | undefined;
  if (parts.length === 2) {
    if (parts[0].length === 4) { // YYYY-MM
      year = parts[0];
      month = parts[1];
    } else { // MM-YYYY
      month = parts[0];
      year = parts[1];
    }
    // Pad month if needed
    if (month && month.length === 1) month = '0' + month;
    // Convert month number to name
    if (month) {
      const monthNum = parseInt(month, 10);
      if (monthNum >= 1 && monthNum <= 12) {
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        return `${monthNames[monthNum - 1]}-${year}`;
      }
    }
    return `${month}-${year}`;
  }
  // Fallback: try to parse as Date
  const d = new Date(dateStr);
  if (!isNaN(d.getTime())) {
    return `${d.toLocaleString('default', { month: 'short' })}-${d.getFullYear()}`;
  }
  return dateStr;
}

function parseDate(dateInput: string | number | undefined): Date {
  if (!dateInput) return new Date("1970-01-01");
  let dateStr = String(dateInput).trim();
  // YYYY
  if (/^\d{4}$/.test(dateStr)) return new Date(`${dateStr}-01-01`);
  // MM-YYYY or YYYY-MM
  let parts = dateStr.split('-');
  if (parts.length === 2) {
    let year, month;
    if (parts[0].length === 4) { // YYYY-MM
      year = parts[0];
      month = parts[1];
    } else { // MM-YYYY
      month = parts[0];
      year = parts[1];
    }
    if (month.length === 1) month = '0' + month;
    return new Date(`${year}-${month}-01`);
  }
  // Fallback
  const d = new Date(dateStr);
  if (!isNaN(d.getTime())) return d;
  return new Date("1970-01-01");
}
---

<MainLayout>
  <GradientBox showNavigation={true} showCopyRight={true}>
    <div class="gallery-about" set:html={aboutHtml}></div>
    <div class="gallery-masonry-wrapper">
      <div class="gallery-masonry">
        {images.map((img, i) => (
          <div class="gallery-masonry-item">
            <img src={img.link} alt={img.title ?? `Gallery photo ${i+1}`} loading="lazy" />
            <div class="gallery-caption">
              <div class="caption-main">
                <div>
                  <strong>{img.title}</strong><br />
                  <small>
                    {img.date && <>{formatMonthYear(img.date)},</>}
                    {img.gear && <>{img.gear},</>}
                    {img.film && <>{img.film}</>}
                  </small>
                </div>
                <a
                  href={img.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="gallery-open-btn"
                  title="Open image in new tab"
                  aria-label="Open image in new tab"
                >
                  <!-- Open in new tab SVG icon -->
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" aria-hidden="true">
                    <path d="M7 13L13 7M13 7H8M13 7V12" stroke="#333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <rect x="3" y="3" width="14" height="14" rx="2" stroke="#333" stroke-width="2"/>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </GradientBox>
</MainLayout>

<style>

.gallery-about {
  padding-left: 10%;
  padding-right: 10%;
  margin-top: 4rem;
  margin-bottom: 3rem;
  line-height: 1.3;
  color: #333;
}

.gallery-masonry-wrapper {
  padding-left: 10%;
  padding-right: 10%;
  margin-top: 4rem;
  margin-bottom: 3rem;
}

.gallery-masonry {
  column-count: 2;
  column-gap: 1rem;
}

.gallery-masonry-item {
  break-inside: avoid;
  margin-bottom: 1.5rem;
  border-radius: 4px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.07);
  background: #fff;
  padding-bottom: 0.5em;
}

.gallery-masonry-item img {
  width: 100%;
  height: auto;
  display: block;
}

.gallery-caption {
  padding: 0.5em 0.5em 0 0.5em;
  font-size: 0.95em;
  color: #444;
}

.caption-main {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.5em;
}

.gallery-open-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2.2em;
  height: 2.2em;
  min-width: 2.2em;
  min-height: 2.2em;
  max-width: 2.2em;
  max-height: 2.2em;
  background: #eee;
  color: #333;
  border-radius: 0.5em;
  font-size: 1.1em;
  text-decoration: none;
  transition: background 0.2s, box-shadow 0.2s;
  margin-left: 0.5em;
  border: none;
  box-shadow: 0 1px 3px rgba(0,0,0,0.04);
  flex-shrink: 0;
}

.gallery-open-btn:hover {
  background: #ddd;
  box-shadow: 0 2px 8px rgba(0,0,0,0.10);
}

.gallery-open-btn svg {
  display: block;
  width: 1.2em;
  height: 1.2em;
  min-width: 1.2em;
  min-height: 1.2em;
  max-width: 1.2em;
  max-height: 1.2em;
}

/* Responsive columns */
@media (max-width: 1200px) {
  .gallery-masonry {
    column-count: 2;
  }
}

@media (max-width: 700px) {
  .gallery-masonry {
    column-count: 1;
  }
  .gallery-masonry-wrapper {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}
</style>
